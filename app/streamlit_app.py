# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-g1z5Neser0-l3bo1tMrezzlXZJGte_X
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load Komponen Pipeline
model = joblib.load("models/model_lgbm_optuna.pkl")
threshold     = joblib.load("models/best_threshold.pkl")
rfe_selector  = joblib.load("models/rfe_selector.pkl")
ord_enc       = joblib.load("models/ordinal_encoder.pkl")
final_columns = joblib.load("models/final_columns.pkl")


# Import fungsi preprocessing
from preprocessing import preprocess_input

# UI
st.set_page_config(page_title="Customer Churn Predictor", layout="wide")
st.title("Customer Churn Prediction App")

tab1, tab2 = st.tabs(["Upload CSV", "Manual Input"])

# Tab 1: Upload CSV
with tab1:
    uploaded = st.file_uploader("Upload file CSV", type=["csv"])
    if uploaded:
        df_uploaded = pd.read_csv(uploaded)
        X_ready = preprocess_input(df_uploaded)
        y_proba = model.predict_proba(X_ready)[:, 1]
        y_pred = (y_proba >= threshold).astype(int)
        df_uploaded["Churn Probability"] = y_proba
        df_uploaded["Predicted Churn"] = y_pred
        st.success("✅ Prediction complete!")
        st.dataframe(df_uploaded)

# Tab 2: Manual Input
with tab2:
    st.subheader("Isi Data Nasabah")
    gender = st.selectbox("Gender", ["Male", "Female"])
    country = st.selectbox("Country", ["France", "Germany", "Spain"])
    credit_score = st.slider("Credit Score", 300, 900, 650)
    age = st.slider("Age", 18, 100, 40)
    tenure = st.slider("Tenure (years)", 0, 10, 3)
    balance = st.number_input("Balance", value=50000.0)
    estimated_salary = st.number_input("Estimated Salary", value=60000.0)
    products_number = st.selectbox("Number of Products", [1, 2, 3, 4])
    credit_card = st.radio("Has Credit Card?", [1, 0], format_func=lambda x: "Yes" if x == 1 else "No")
    active_member = st.radio("Active Member?", [1, 0], format_func=lambda x: "Yes" if x == 1 else "No")

    if st.button("Predict Churn"):
        df_manual = pd.DataFrame([{
            "gender": gender,
            "country": country,
            "credit_score": credit_score,
            "age": age,
            "tenure": tenure,
            "balance": balance,
            "estimated_salary": estimated_salary,
            "products_number": products_number,
            "credit_card": credit_card,
            "active_member": active_member
        }])

        X_ready = preprocess_input(df_manual)
        proba = model.predict_proba(X_ready)[:, 1][0]
        pred = "Churn" if proba >= threshold else "Not Churn"

        st.markdown(f"### ✅ Churn Probability: **{proba:.2%}**")
        st.markdown(f"### ✅ Predicted Status: **{pred}**")
